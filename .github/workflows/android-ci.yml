name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        echo "MAPS_API_KEY=dummy_key_for_ci" >> local.properties
        echo "SPOTIFY_CLIENT_ID=dummy_key_for_ci" >> local.properties
        echo "ELEVEN_LABS_API_KEY=dummy_key_for_ci" >> local.properties
        echo "GEMINI_API_KEY=dummy_key_for_ci" >> local.properties
        
    - name: Create dummy google-services.json
      run: |
        echo '{
          "project_info": {
            "project_number": "123456789",
            "project_id": "dummy-project",
            "storage_bucket": "dummy-project.appspot.com"
          },
          "client": [
            {
              "client_info": {
                "mobilesdk_app_id": "1:123456789:android:dummy",
                "android_client_info": {
                  "package_name": "com.runiq"
                }
              },
              "oauth_client": [],
              "api_key": [
                {
                  "current_key": "dummy_api_key"
                }
              ],
              "services": {
                "appinvite_service": {
                  "other_platform_oauth_client": []
                }
              }
            }
          ],
          "configuration_version": "1"
        }' > app/google-services.json
        
    - name: Run lint
      run: ./gradlew lint
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload build reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-reports
        path: |
          app/build/reports/
          app/build/test-results/
          
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run ktlint
      run: |
        curl -sSLO https://github.com/pinterest/ktlint/releases/download/1.0.1/ktlint && chmod a+x ktlint
        ./ktlint --android "app/src/**/*.kt"
      continue-on-error: true
      
    - name: Check for hardcoded secrets
      run: |
        # Check for potential hardcoded API keys or secrets
        ! grep -r "sk_[a-zA-Z0-9]\{32,\}" --include="*.kt" --include="*.java" --include="*.xml" app/src || (echo "Potential hardcoded secrets found!" && exit 1)
        ! grep -r "AIza[a-zA-Z0-9]\{35\}" --include="*.kt" --include="*.java" --include="*.xml" app/src || (echo "Potential Google API key found!" && exit 1)
        
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        echo "MAPS_API_KEY=dummy_key_for_ci" >> local.properties
        echo "SPOTIFY_CLIENT_ID=dummy_key_for_ci" >> local.properties
        echo "ELEVEN_LABS_API_KEY=dummy_key_for_ci" >> local.properties
        echo "GEMINI_API_KEY=dummy_key_for_ci" >> local.properties
        
    - name: Create dummy google-services.json
      run: |
        echo '{
          "project_info": {
            "project_number": "123456789",
            "project_id": "dummy-project",
            "storage_bucket": "dummy-project.appspot.com"
          },
          "client": [
            {
              "client_info": {
                "mobilesdk_app_id": "1:123456789:android:dummy",
                "android_client_info": {
                  "package_name": "com.runiq"
                }
              },
              "oauth_client": [],
              "api_key": [
                {
                  "current_key": "dummy_api_key"
                }
              ],
              "services": {
                "appinvite_service": {
                  "other_platform_oauth_client": []
                }
              }
            }
          ],
          "configuration_version": "1"
        }' > app/google-services.json
        
    - name: Generate test coverage report
      run: ./gradlew testDebugUnitTestCoverage || true
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: app/build/reports/coverage/