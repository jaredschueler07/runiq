name: Android CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run ktlint
      run: ./gradlew ktlintCheck
      
    - name: Run Android lint
      run: ./gradlew lint
      
    - name: Upload lint reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-reports
        path: |
          app/build/reports/lint-results-*.html
          app/build/reports/ktlint/

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      if: always()
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          app/build/reports/jacoco/

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Create mock google-services.json
      run: |
        mkdir -p app/
        echo '{"project_info":{"project_number":"000000000000","project_id":"mock-project"},"client":[{"client_info":{"mobilesdk_app_id":"1:000000000000:android:mock","android_client_info":{"package_name":"com.example.runiq"}},"oauth_client":[],"api_key":[{"current_key":"mock-api-key"}],"services":{"appinvite_service":{"other_platform_oauth_client":[]}}}],"configuration_version":"1"}' > app/google-services.json
        
    - name: Create mock API key files
      run: |
        echo "mock_spotify_secret" > spotify_client_secret
        echo "mock_eleven_labs_key" > eleven_labs_api_key
        echo "mock_gemini_key" > gemini_api_key
        
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Build release APK
      run: ./gradlew assembleRelease
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: apk-files
        path: |
          app/build/outputs/apk/debug/*.apk
          app/build/outputs/apk/release/*.apk

  instrumented-tests:
    name: Instrumented Tests
    runs-on: macos-latest
    needs: [lint, test]
    
    strategy:
      matrix:
        api-level: [28, 30, 34]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Create mock configuration files
      run: |
        mkdir -p app/
        echo '{"project_info":{"project_number":"000000000000","project_id":"mock-project"},"client":[{"client_info":{"mobilesdk_app_id":"1:000000000000:android:mock","android_client_info":{"package_name":"com.example.runiq"}},"oauth_client":[],"api_key":[{"current_key":"mock-api-key"}],"services":{"appinvite_service":{"other_platform_oauth_client":[]}}}],"configuration_version":"1"}' > app/google-services.json
        echo "mock_spotify_secret" > spotify_client_secret
        echo "mock_eleven_labs_key" > eleven_labs_api_key
        echo "mock_gemini_key" > gemini_api_key
        
    - name: AVD cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: ./gradlew connectedAndroidTest
        
    - name: Upload instrumented test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: instrumented-test-results-api-${{ matrix.api-level }}
        path: app/build/reports/androidTests/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'